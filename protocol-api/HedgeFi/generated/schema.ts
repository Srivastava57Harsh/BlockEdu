// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class Claim extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Claim entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Claim must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Claim', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Claim | null {
    return changetype<Claim | null>(store.get('Claim', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get claimant(): Bytes {
    let value = this.get('claimant');
    return value!.toBytes();
  }

  set claimant(value: Bytes) {
    this.set('claimant', Value.fromBytes(value));
  }

  get amount_A(): BigInt {
    let value = this.get('amount_A');
    return value!.toBigInt();
  }

  set amount_A(value: BigInt) {
    this.set('amount_A', Value.fromBigInt(value));
  }

  get amount_B(): BigInt {
    let value = this.get('amount_B');
    return value!.toBigInt();
  }

  set amount_B(value: BigInt) {
    this.set('amount_B', Value.fromBigInt(value));
  }

  get amount_c(): BigInt {
    let value = this.get('amount_c');
    return value!.toBigInt();
  }

  set amount_c(value: BigInt) {
    this.set('amount_c', Value.fromBigInt(value));
  }

  get amount_cx(): BigInt {
    let value = this.get('amount_cx');
    return value!.toBigInt();
  }

  set amount_cx(value: BigInt) {
    this.set('amount_cx', Value.fromBigInt(value));
  }

  get amount_cy(): BigInt {
    let value = this.get('amount_cy');
    return value!.toBigInt();
  }

  set amount_cy(value: BigInt) {
    this.set('amount_cy', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class Divest extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Divest entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Divest must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Divest', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Divest | null {
    return changetype<Divest | null>(store.get('Divest', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get amount_c(): BigInt {
    let value = this.get('amount_c');
    return value!.toBigInt();
  }

  set amount_c(value: BigInt) {
    this.set('amount_c', Value.fromBigInt(value));
  }

  get amount_cx(): BigInt {
    let value = this.get('amount_cx');
    return value!.toBigInt();
  }

  set amount_cx(value: BigInt) {
    this.set('amount_cx', Value.fromBigInt(value));
  }

  get amount_cy(): BigInt {
    let value = this.get('amount_cy');
    return value!.toBigInt();
  }

  set amount_cy(value: BigInt) {
    this.set('amount_cy', Value.fromBigInt(value));
  }

  get amount_c_incentive(): BigInt {
    let value = this.get('amount_c_incentive');
    return value!.toBigInt();
  }

  set amount_c_incentive(value: BigInt) {
    this.set('amount_c_incentive', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class Invest extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Invest entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Invest must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Invest', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Invest | null {
    return changetype<Invest | null>(store.get('Invest', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get amount_c(): BigInt {
    let value = this.get('amount_c');
    return value!.toBigInt();
  }

  set amount_c(value: BigInt) {
    this.set('amount_c', Value.fromBigInt(value));
  }

  get amount_cx(): BigInt {
    let value = this.get('amount_cx');
    return value!.toBigInt();
  }

  set amount_cx(value: BigInt) {
    this.set('amount_cx', Value.fromBigInt(value));
  }

  get amount_cy(): BigInt {
    let value = this.get('amount_cy');
    return value!.toBigInt();
  }

  set amount_cy(value: BigInt) {
    this.set('amount_cy', Value.fromBigInt(value));
  }

  get amount_c_incentive(): BigInt {
    let value = this.get('amount_c_incentive');
    return value!.toBigInt();
  }

  set amount_c_incentive(value: BigInt) {
    this.set('amount_c_incentive', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class RiskSplit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RiskSplit entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RiskSplit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RiskSplit', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): RiskSplit | null {
    return changetype<RiskSplit | null>(
      store.get('RiskSplit', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get splitter(): Bytes {
    let value = this.get('splitter');
    return value!.toBytes();
  }

  set splitter(value: Bytes) {
    this.set('splitter', Value.fromBytes(value));
  }

  get amount_c(): BigInt {
    let value = this.get('amount_c');
    return value!.toBigInt();
  }

  set amount_c(value: BigInt) {
    this.set('amount_c', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}
